Polymorphism is a fundamental concept in object-oriented programming (OOP) and is an 
important feature of the Java programming language. It allows objects of different 
classes to be treated as objects of a common superclass. Polymorphism enables you to
write more flexible and reusable code by using a common interface or base class for 
a group of related classes. In Java, polymorphism is primarily achieved through method 
overriding and interfaces. Here's a brief overview of how polymorphism works in Java:

1. Method Overriding:
   - In Java, you can define a method in a subclass that has the same name,
return type, and parameters as a method in its superclass. 
This is known as method overriding.
   - When you create an object of the subclass and call the overridden 
method, the JVM determines which version of the method to execute based on the actual type of the object at runtime.
   - This is often referred to as "dynamic method dispatch."

```java
class Animal {
    void makeSound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    @Override
    void makeSound() {
        System.out.println("Dog barks");
    }
}

public class PolymorphismExample {
    public static void main(String[] args) {
        Animal myAnimal = new Dog(); // Polymorphism - Animal reference, Dog object
        myAnimal.makeSound(); // Calls Dog's makeSound() method
    }
}
```

2. Method Overloading 
Method overloading in Java allows a class to have multiple methods with the same name, but with different parameter lists. 
The compiler determines which method to call based on the number and types of arguments passed to the method. 
Method overloading is a form of compile-time (static) polymorphism.

Here are the key rules and considerations for method overloading in Java:

Method Name: Methods must have the same name.

Parameter Lists: Methods must have a different number or type of parameters. The order of parameters does not matter.

Return Type: The return type does not play a role in method overloading. Two methods can have the same name and parameter list but different return types.

Access Modifiers: The access modifiers can be the same or different.

Exceptions: The methods can declare different sets of checked exceptions. However, if a method in a subclass overrides a
method in its superclass, the overriding method cannot declare more checked exceptions than the overridden method.
