In Java, concurrency executors are a part of the java.util.concurrent framework, 
which provides a higher-level, more flexible way to manage and control concurrent 
tasks compared to traditional Java threading. Executors manage a pool of worker threads 
and allow you to submit tasks for execution in a multithreaded environment. 
This helps you efficiently utilize system resources and simplify concurrent programming.
executors
==========
Till now we are creating new threads for every task. This is not optimized way.
with the help of executor framework we can reuse the threads.

Executor Framework maintains a thread pool, After completion of the task it doesnt get destroyed but rather it is
kept on the thread pool for further operations.
It maintaisn a waiting queue.

All the task in the thread waits until a thread becomes available.

Here are some key components and concepts related to concurrency executors in Java:

1. **Executor Interfaces**:

    - `Executor`: This is the most basic interface in the executor framework.
	It has a single method, `execute(Runnable command)`, which takes a `Runnable` 
	task and executes it in the background.

    - `ExecutorService`: This interface extends `Executor` and provides more advanced features for managing tasks. 
	It includes methods for submitting tasks and obtaining `Future` objects to retrieve results.

2. **Executor Framework Implementations**:

    - `ThreadPoolExecutor`: This is a powerful and highly configurable implementation of the `ExecutorService` interface. 
	It allows you to specify parameters such as the core pool size, maximum pool size, and thread idle timeout. 
	It automatically manages a pool of worker threads and schedules tasks for execution.

    - `ScheduledExecutorService`: This interface extends `ExecutorService` and provides methods for scheduling 
	tasks to run at a specified time or with a fixed delay or rate.

3. **Executor Factory Methods**:

    - `Executors`: This class provides factory methods for creating different types of executors, 
	such as fixed-size thread pools, single-threaded executors, cached thread pools, and scheduled executors.
	While it's convenient for creating executors, it's important to choose the right type for your application 
	to avoid potential issues like thread pool exhaustion.

4. **Future**:

    - `Future`: When you submit a task to an `ExecutorService`, it returns a `Future` object.
	A `Future` represents the result of an asynchronous computation and provides methods to
	check if the computation is complete, retrieve the result, or cancel it.

Here's a basic example of how to use a fixed-size thread pool executor:

```java
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ExecutorExample {
    public static void main(String[] args) {
        // Create a fixed-size thread pool with 4 threads
        ExecutorService executor = Executors.newFixedThreadPool(4);

        // Submit tasks for execution
        for (int i = 0; i < 10; i++) {
            final int taskNumber = i;
            executor.execute(() -> {
                System.out.println("Task " + taskNumber + " is executing.");
            });
        }

        // Shutdown the executor when done
        executor.shutdown();
    }
}
```
